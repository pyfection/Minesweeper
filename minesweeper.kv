#:import timedelta datetime.timedelta
#:import MDThemePicker kivymd.uix.picker.MDThemePicker

FloatLayout:
    ScrollView:
        canvas.before:
            Color:
                rgb: app.theme_cls.bg_normal
            Rectangle:
                pos: self.pos
                size: self.size

        Grid:
            id: grid
            pos_hint: {'top': 1}
            size_hint: None, None
            width: self.cols * 32
            height: self.rows * 32
            on_status: game_status.text = "Won" if self.status == 'won' else "Lost" if self.status == 'lost' else ''

    MDLabel:
        id: game_status

    ScreenManager:
        id: sm

        Screen:
            name: 'setup'
            BoxLayout:
                size_hint_y: None
                height: dp(150)
                orientation: "vertical"

                GridLayout:
                    cols: 2

                    MDLabel:
                        text: "Rows: " + str(int(cols_slider.value))
                    MDSlider:
                        id: cols_slider
                        min: 5
                        max: 20
                        value: 10
                        on_value: grid.rows = int(self.value)


                    MDLabel:
                        text: "Columns: " + str(int(rows_slider.value))
                    MDSlider:
                        id: rows_slider
                        min: 5
                        max: 20
                        value: 10
                        on_value: grid.cols = int(self.value)

                    MDLabel:
                        text: "Bombs: " + str(int(bombs_slider.value))
                    MDSlider:
                        id: bombs_slider
                        min: 1
                        max: min(100, cols_slider.value * rows_slider.value - 9)
                        value: 10
                        on_value: grid.bombs = int(self.value)

                    MDLabel:
                        text: "Difficulty: "
                    MDLabel:
                        difficulty: round(bombs_slider.value / (cols_slider.value * rows_slider.value) * 100) if cols_slider.value else 0
                        text: str(self.difficulty) + '%  ' + '(' + ('easy' if self.difficulty < 7 else 'medium' if self.difficulty < 15 else 'hard' if self.difficulty < 20 else 'extreme') + ')'

                BoxLayout:
                    MDFlatButton:
                        text: "Generate!"
                        size_hint_x: 1
                        on_press: sm.current = 'game'; grid.status = 'new'

                    ImageButton:
                        size_hint: None, None
                        size: dp(32), dp(32)
                        source: 'img/palette.png'
                        on_press: MDThemePicker().open()
                        canvas:
                            Color:
                                rgba: app.theme_cls.accent_color
                            Rectangle:
                                texture: self.texture
                                pos: self.pos
                                size: self.size

                    ImageButton:
                        size_hint: None, None
                        size: dp(32), dp(32)
                        source: 'img/settings.png'
                        on_press: app.open_settings()
                        canvas:
                            Color:
                                rgba: app.theme_cls.accent_color
                            Rectangle:
                                texture: self.texture
                                pos: self.pos
                                size: self.size

        Screen:
            name: 'game'
            BoxLayout:
                size_hint_y: None
                height: dp(32)

                BoxLayout:
                    orientation: 'vertical'

                    MDLabel:
                        pos: dp(10), dp(10)
                        valign: 'bottom'
                        text: "Bombs: " + str(grid.bombs - grid.flags)

                    MDLabel:
                        pos: dp(10), dp(20)
                        valign: 'bottom'
                        text: "Time: " + str(timedelta(seconds=int(grid.time)))

                OptionsBar:
                    options: [{'name': 'uncover', 'source': 'img/bomb.png'}, {'name': 'flag', 'source': 'img/flag.png'}]
                    on_current: grid.mode = self.current

                ImageButton:
                    size_hint: None, None
                    size: dp(32), dp(32)
                    pos: root.right - dp(self.width+10), dp(10)
                    source: 'img/reset.png'
                    on_press: sm.current = 'setup'; grid.refresh()
                    canvas:
                        Color:
                            rgba: app.theme_cls.accent_color
                        Rectangle:
                            texture: self.texture
                            pos: self.pos
                            size: self.size
